
IR PULSE IAF TRANSMITTER ATTINY13A.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000206  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00800060  00000206  0000029a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  0080008a  0080008a  000002c4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000297  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000015a  00000000  00000000  00000607  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000191  00000000  00000000  00000761  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000084  00000000  00000000  000008f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000258  00000000  00000000  00000978  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000167  00000000  00000000  00000bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00000d37  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	b3 c0       	rjmp	.+358    	; 0x174 <__vector_6>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61

0000001c <__do_copy_data>:
  1c:	10 e0       	ldi	r17, 0x00	; 0
  1e:	a0 e6       	ldi	r26, 0x60	; 96
  20:	b0 e0       	ldi	r27, 0x00	; 0
  22:	e6 e0       	ldi	r30, 0x06	; 6
  24:	f2 e0       	ldi	r31, 0x02	; 2
  26:	02 c0       	rjmp	.+4      	; 0x2c <__do_copy_data+0x10>
  28:	05 90       	lpm	r0, Z+
  2a:	0d 92       	st	X+, r0
  2c:	aa 38       	cpi	r26, 0x8A	; 138
  2e:	b1 07       	cpc	r27, r17
  30:	d9 f7       	brne	.-10     	; 0x28 <__do_copy_data+0xc>

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	aa e8       	ldi	r26, 0x8A	; 138
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a0 39       	cpi	r26, 0x90	; 144
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	77 d0       	rcall	.+238    	; 0x132 <main>
  44:	de c0       	rjmp	.+444    	; 0x202 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <delay_us>:
volatile int delay = 600; //Default value, should be changed by fire1pulse()

void delay_us(uint16_t count) {
	/* IMPORTANT */
	/* IN "count" USE ONLY MULTIPLES OF 3 WITH THE delay_ms() FUNCTION OR ELSE WILL FAIL */
	while(count -=3) {
  48:	03 97       	sbiw	r24, 0x03	; 3
  4a:	31 f0       	breq	.+12     	; 0x58 <delay_us+0x10>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  4c:	26 e0       	ldi	r18, 0x06	; 6
  4e:	2a 95       	dec	r18
  50:	f1 f7       	brne	.-4      	; 0x4e <delay_us+0x6>
  52:	00 c0       	rjmp	.+0      	; 0x54 <delay_us+0xc>
  54:	03 97       	sbiw	r24, 0x03	; 3
  56:	d1 f7       	brne	.-12     	; 0x4c <delay_us+0x4>
  58:	08 95       	ret

0000005a <fireSequence>:
	while(count--) {
		_delay_us(1);
	}
}

void fireSequence(){
  5a:	cf 93       	push	r28
  5c:	df 93       	push	r29
	// With new timer, 660 gives a 1.2ms pulse
	/* IMPORTANT */
	/* USE ONLY MULTIPLES OF 3 WITH THE delay_ms() FUNCTION OR ELSE FAILURE */
		
	
	ind=0;
  5e:	10 92 8b 00 	sts	0x008B, r1
  62:	10 92 8a 00 	sts	0x008A, r1
	while(ind<=8){
  66:	80 91 8a 00 	lds	r24, 0x008A
  6a:	90 91 8b 00 	lds	r25, 0x008B
  6e:	09 97       	sbiw	r24, 0x09	; 9
  70:	0c f0       	brlt	.+2      	; 0x74 <fireSequence+0x1a>
  72:	5c c0       	rjmp	.+184    	; 0x12c <__stack+0x8d>
		/* Calculate and transmit PULSE */
		
		delay = PulseSequence[ind] * DelayMultipler;
		if(ind == FIRSTBIT || ind == SECONDBIT || ind == 0)
			IRtransmit=1;
  74:	c1 e0       	ldi	r28, 0x01	; 1
  76:	d0 e0       	ldi	r29, 0x00	; 0
	
	ind=0;
	while(ind<=8){
		/* Calculate and transmit PULSE */
		
		delay = PulseSequence[ind] * DelayMultipler;
  78:	e0 91 8a 00 	lds	r30, 0x008A
  7c:	f0 91 8b 00 	lds	r31, 0x008B
  80:	ee 0f       	add	r30, r30
  82:	ff 1f       	adc	r31, r31
  84:	e8 58       	subi	r30, 0x88	; 136
  86:	ff 4f       	sbci	r31, 0xFF	; 255
  88:	60 91 64 00 	lds	r22, 0x0064
  8c:	70 91 65 00 	lds	r23, 0x0065
  90:	80 81       	ld	r24, Z
  92:	91 81       	ldd	r25, Z+1	; 0x01
  94:	a5 d0       	rcall	.+330    	; 0x1e0 <__mulhi3>
  96:	90 93 61 00 	sts	0x0061, r25
  9a:	80 93 60 00 	sts	0x0060, r24
		if(ind == FIRSTBIT || ind == SECONDBIT || ind == 0)
  9e:	80 91 8a 00 	lds	r24, 0x008A
  a2:	90 91 8b 00 	lds	r25, 0x008B
  a6:	05 97       	sbiw	r24, 0x05	; 5
  a8:	61 f0       	breq	.+24     	; 0xc2 <__stack+0x23>
  aa:	80 91 8a 00 	lds	r24, 0x008A
  ae:	90 91 8b 00 	lds	r25, 0x008B
  b2:	06 97       	sbiw	r24, 0x06	; 6
  b4:	31 f0       	breq	.+12     	; 0xc2 <__stack+0x23>
  b6:	80 91 8a 00 	lds	r24, 0x008A
  ba:	90 91 8b 00 	lds	r25, 0x008B
  be:	89 2b       	or	r24, r25
  c0:	21 f4       	brne	.+8      	; 0xca <__stack+0x2b>
			IRtransmit=1;
  c2:	d0 93 8d 00 	sts	0x008D, r29
  c6:	c0 93 8c 00 	sts	0x008C, r28
		delay_us(delay);
  ca:	80 91 60 00 	lds	r24, 0x0060
  ce:	90 91 61 00 	lds	r25, 0x0061
  d2:	ba df       	rcall	.-140    	; 0x48 <delay_us>
	
		/* Calculate and transmit WAIT period */
		delay = WaitSequence[ind] * DelayMultipler;
  d4:	e0 91 8a 00 	lds	r30, 0x008A
  d8:	f0 91 8b 00 	lds	r31, 0x008B
  dc:	ee 0f       	add	r30, r30
  de:	ff 1f       	adc	r31, r31
  e0:	ea 59       	subi	r30, 0x9A	; 154
  e2:	ff 4f       	sbci	r31, 0xFF	; 255
  e4:	60 91 64 00 	lds	r22, 0x0064
  e8:	70 91 65 00 	lds	r23, 0x0065
  ec:	80 81       	ld	r24, Z
  ee:	91 81       	ldd	r25, Z+1	; 0x01
  f0:	77 d0       	rcall	.+238    	; 0x1e0 <__mulhi3>
  f2:	90 93 61 00 	sts	0x0061, r25
  f6:	80 93 60 00 	sts	0x0060, r24
		IRtransmit=0;delay_us(delay);
  fa:	10 92 8d 00 	sts	0x008D, r1
  fe:	10 92 8c 00 	sts	0x008C, r1
 102:	80 91 60 00 	lds	r24, 0x0060
 106:	90 91 61 00 	lds	r25, 0x0061
 10a:	9e df       	rcall	.-196    	; 0x48 <delay_us>
		ind++;
 10c:	80 91 8a 00 	lds	r24, 0x008A
 110:	90 91 8b 00 	lds	r25, 0x008B
 114:	01 96       	adiw	r24, 0x01	; 1
 116:	90 93 8b 00 	sts	0x008B, r25
 11a:	80 93 8a 00 	sts	0x008A, r24
	/* IMPORTANT */
	/* USE ONLY MULTIPLES OF 3 WITH THE delay_ms() FUNCTION OR ELSE FAILURE */
		
	
	ind=0;
	while(ind<=8){
 11e:	80 91 8a 00 	lds	r24, 0x008A
 122:	90 91 8b 00 	lds	r25, 0x008B
 126:	09 97       	sbiw	r24, 0x09	; 9
 128:	0c f4       	brge	.+2      	; 0x12c <__stack+0x8d>
 12a:	a6 cf       	rjmp	.-180    	; 0x78 <fireSequence+0x1e>
	}	
	/* Transmission is about 22.5ms total for the sequence before restart
	* So there is 44Hz of sequence transmitted. Meaning that the resolution has to detect
	* error from 44 instances of ID Signal per second.
	*/
}
 12c:	df 91       	pop	r29
 12e:	cf 91       	pop	r28
 130:	08 95       	ret

00000132 <main>:

int main(void){
	DDRB = 0b00011000; //pb4 and pb3  set as outputs, keep PB2 an input so TransLED doesn't light up too much ?
 132:	88 e1       	ldi	r24, 0x18	; 24
 134:	87 bb       	out	0x17, r24	; 23

	//Timer Count/Compare Interrupt Settings
	SREG = 0b10000000;	//sreg bit 7 enables global interrupts
 136:	80 e8       	ldi	r24, 0x80	; 128
 138:	8f bf       	out	0x3f, r24	; 63
	TCCR0B=0b00000001;  //initialize counter , no clock prescalar
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	83 bf       	out	0x33, r24	; 51
	TIMSK0=0b00000100;  //enable ocie0A
 13e:	84 e0       	ldi	r24, 0x04	; 4
 140:	89 bf       	out	0x39, r24	; 57
	TCNT0 = 0; //Initialize Timer
 142:	12 be       	out	0x32, r1	; 50
	OCR0A=77; //8microsecs
 144:	8d e4       	ldi	r24, 0x4D	; 77
 146:	86 bf       	out	0x36, r24	; 54
	//OCR0A=154; //16microsecs
	//OCR0A can be changed anywhere dynamically in the code
	sei();
 148:	78 94       	sei
	
	/* TRANSMITTER */
	while(1){	
	/* Option C for IAF */
		triggerSignalReceived = PINB & PB1_input;
 14a:	86 b3       	in	r24, 0x16	; 22
 14c:	82 70       	andi	r24, 0x02	; 2
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	90 93 8f 00 	sts	0x008F, r25
 154:	80 93 8e 00 	sts	0x008E, r24
		if(triggerSignalReceived == PB1_input){
 158:	80 91 8e 00 	lds	r24, 0x008E
 15c:	90 91 8f 00 	lds	r25, 0x008F
 160:	02 97       	sbiw	r24, 0x02	; 2
 162:	99 f7       	brne	.-26     	; 0x14a <main+0x18>
			PORTB |= PB3_visible;
 164:	c3 9a       	sbi	0x18, 3	; 24
			fireSequence();
 166:	79 df       	rcall	.-270    	; 0x5a <fireSequence>
			PORTB &= ~PB3_visible;
 168:	c3 98       	cbi	0x18, 3	; 24
			triggerSignalReceived = 0;
 16a:	10 92 8f 00 	sts	0x008F, r1
 16e:	10 92 8e 00 	sts	0x008E, r1
 172:	eb cf       	rjmp	.-42     	; 0x14a <main+0x18>

00000174 <__vector_6>:
	return 1;
}

ISR (TIM0_COMPA_vect)  // Timer interrupt for generating a 38kHz Pulse. Continuously running, 
					   // only output to pin when IRtransmit==1
{
 174:	1f 92       	push	r1
 176:	0f 92       	push	r0
 178:	0f b6       	in	r0, 0x3f	; 63
 17a:	0f 92       	push	r0
 17c:	11 24       	eor	r1, r1
 17e:	8f 93       	push	r24
 180:	9f 93       	push	r25
	// ISR is constantly running in the background but IRTransmit controls if it does anything
	cli();
 182:	f8 94       	cli
	//sony sirc 38khz carrier wave  pulse high for 8us
	if (IRstate==1){
 184:	80 91 62 00 	lds	r24, 0x0062
 188:	90 91 63 00 	lds	r25, 0x0063
 18c:	01 97       	sbiw	r24, 0x01	; 1
 18e:	81 f4       	brne	.+32     	; 0x1b0 <__vector_6+0x3c>
		if(IRtransmit==1){
 190:	80 91 8c 00 	lds	r24, 0x008C
 194:	90 91 8d 00 	lds	r25, 0x008D
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	09 f4       	brne	.+2      	; 0x19e <__vector_6+0x2a>
			PORTB = PORTB | PB4_IR; //-turn on pb4 - IR LED and pb2 - Transm LED
 19c:	c4 9a       	sbi	0x18, 4	; 24
		}
		else{
			//	PORTB = PORTB & ~0b00010000; //-make sure pb4 is off
		}
		OCR0A=48; //8usec on pulse //Target, output compare register 0 A
 19e:	80 e3       	ldi	r24, 0x30	; 48
 1a0:	86 bf       	out	0x36, r24	; 54
		// OCR0A IS THE POWER RATIO. 48 <-> 96 IS JUST A POWER RATIO OF THE 38KHZ SIGNAL
		//Whenever TCNT0 = 48, wakes up, then wait
		IRstate=2;
 1a2:	82 e0       	ldi	r24, 0x02	; 2
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	90 93 63 00 	sts	0x0063, r25
 1aa:	80 93 62 00 	sts	0x0062, r24
 1ae:	0f c0       	rjmp	.+30     	; 0x1ce <__vector_6+0x5a>
	}

	//sony sirc 38khz carrier wave pulse low for 16us
	else if (IRstate==2)
 1b0:	80 91 62 00 	lds	r24, 0x0062
 1b4:	90 91 63 00 	lds	r25, 0x0063
 1b8:	02 97       	sbiw	r24, 0x02	; 2
 1ba:	49 f4       	brne	.+18     	; 0x1ce <__vector_6+0x5a>
	{
		PORTB = PORTB & ~PB4_IR; //-make sure pb4 and pb2 are off
 1bc:	c4 98       	cbi	0x18, 4	; 24
		OCR0A=96; //16usec on pulse
 1be:	80 e6       	ldi	r24, 0x60	; 96
 1c0:	86 bf       	out	0x36, r24	; 54
		IRstate=1;
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	90 93 63 00 	sts	0x0063, r25
 1ca:	80 93 62 00 	sts	0x0062, r24
	}

	TCNT0=0;
 1ce:	12 be       	out	0x32, r1	; 50
	sei();
 1d0:	78 94       	sei
}
 1d2:	9f 91       	pop	r25
 1d4:	8f 91       	pop	r24
 1d6:	0f 90       	pop	r0
 1d8:	0f be       	out	0x3f, r0	; 63
 1da:	0f 90       	pop	r0
 1dc:	1f 90       	pop	r1
 1de:	18 95       	reti

000001e0 <__mulhi3>:
 1e0:	00 24       	eor	r0, r0
 1e2:	55 27       	eor	r21, r21
 1e4:	04 c0       	rjmp	.+8      	; 0x1ee <__mulhi3+0xe>
 1e6:	08 0e       	add	r0, r24
 1e8:	59 1f       	adc	r21, r25
 1ea:	88 0f       	add	r24, r24
 1ec:	99 1f       	adc	r25, r25
 1ee:	00 97       	sbiw	r24, 0x00	; 0
 1f0:	29 f0       	breq	.+10     	; 0x1fc <__mulhi3+0x1c>
 1f2:	76 95       	lsr	r23
 1f4:	67 95       	ror	r22
 1f6:	b8 f3       	brcs	.-18     	; 0x1e6 <__mulhi3+0x6>
 1f8:	71 05       	cpc	r23, r1
 1fa:	b9 f7       	brne	.-18     	; 0x1ea <__mulhi3+0xa>
 1fc:	80 2d       	mov	r24, r0
 1fe:	95 2f       	mov	r25, r21
 200:	08 95       	ret

00000202 <_exit>:
 202:	f8 94       	cli

00000204 <__stop_program>:
 204:	ff cf       	rjmp	.-2      	; 0x204 <__stop_program>
