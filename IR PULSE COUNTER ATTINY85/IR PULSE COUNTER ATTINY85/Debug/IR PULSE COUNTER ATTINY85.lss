
IR PULSE COUNTER ATTINY85.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001bc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800060  00800060  00000230  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000260  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000002a8  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001a5  00000000  00000000  00000584  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000191  00000000  00000000  00000729  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000090  00000000  00000000  000008bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000234  00000000  00000000  0000094c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000113  00000000  00000000  00000b80  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00000c93  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	6b c0       	rjmp	.+214    	; 0xdc <__vector_2>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	ec eb       	ldi	r30, 0xBC	; 188
  32:	f1 e0       	ldi	r31, 0x01	; 1
  34:	02 c0       	rjmp	.+4      	; 0x3a <__do_copy_data+0x10>
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0
  3a:	a0 36       	cpi	r26, 0x60	; 96
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <__do_copy_data+0xc>

00000040 <__do_clear_bss>:
  40:	20 e0       	ldi	r18, 0x00	; 0
  42:	a0 e6       	ldi	r26, 0x60	; 96
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a0 37       	cpi	r26, 0x70	; 112
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	0c d0       	rcall	.+24     	; 0x6a <main>
  52:	b2 c0       	rjmp	.+356    	; 0x1b8 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <pwm_setup>:
}

void pwm_setup(void){
	// PB0/OCOA (pin5) and PB1/OCOB (pin6), have PWM ability
	// Both running from Timer 0.
	TCCR0B |= (1<<CS01) | (1<<CS00); // Pre-scale factor = 64
  56:	83 b7       	in	r24, 0x33	; 51
  58:	83 60       	ori	r24, 0x03	; 3
  5a:	83 bf       	out	0x33, r24	; 51

	// Set to 'Fast PWM' mode
	TCCR0A |= (1<<WGM01) | (1<<WGM00);
  5c:	8a b5       	in	r24, 0x2a	; 42
  5e:	83 60       	ori	r24, 0x03	; 3
  60:	8a bd       	out	0x2a, r24	; 42

	// Clear OC0B output on compare match, upwards counting
	TCCR0A |= (1<<COM0A1) | (1<<COM0B1);
  62:	8a b5       	in	r24, 0x2a	; 42
  64:	80 6a       	ori	r24, 0xA0	; 160
  66:	8a bd       	out	0x2a, r24	; 42
  68:	08 95       	ret

0000006a <main>:
void pwm_write(uint8_t value){
	OCR0B = value;
}

int main(void){
	DDRB = 0b000010; // PB1 is the output PWM pin
  6a:	82 e0       	ldi	r24, 0x02	; 2
  6c:	87 bb       	out	0x17, r24	; 23
					 // PB0 is the input read pin from the transmitter
	
	//Pin Change Interrupt Config
	SREG  =  SREG | 0b10000000;	
  6e:	8f b7       	in	r24, 0x3f	; 63
  70:	80 68       	ori	r24, 0x80	; 128
  72:	8f bf       	out	0x3f, r24	; 63
	MCUCR = MCUCR | 0b00000000;  
  74:	85 b7       	in	r24, 0x35	; 53
  76:	85 bf       	out	0x35, r24	; 53
	GIMSK = 0b00100000; // Set PCIE to enable pin change interrupts
  78:	80 e2       	ldi	r24, 0x20	; 32
  7a:	8b bf       	out	0x3b, r24	; 59
	PCMSK = 0b00000001; // Enables pin change interrupts on pcint0
  7c:	81 e0       	ldi	r24, 0x01	; 1
  7e:	85 bb       	out	0x15, r24	; 21
	TCCR1 |= (1<<CS13) | (1<<CS11) | (1<<CS10); // Sets timer 1  to run with 1024 scaled
  80:	80 b7       	in	r24, 0x30	; 48
  82:	8b 60       	ori	r24, 0x0B	; 11
  84:	80 bf       	out	0x30, r24	; 48
								  // clock-cycles prescaler

	//Enable interrupts
	sei();
  86:	78 94       	sei
	
	//Enable pwm
	pwm_setup();
  88:	e6 df       	rcall	.-52     	; 0x56 <pwm_setup>
//	pwm_write(200);
	
	while(1){
		/* Check the # of pulses */
		countCopy = IRcount;
  8a:	80 91 64 00 	lds	r24, 0x0064
  8e:	90 91 65 00 	lds	r25, 0x0065
  92:	90 93 61 00 	sts	0x0061, r25
  96:	80 93 60 00 	sts	0x0060, r24
//		if(countCopy > 50)
			pwmvalue = countCopy*2; // 50 is a testing value
  9a:	80 91 60 00 	lds	r24, 0x0060
  9e:	90 91 61 00 	lds	r25, 0x0061
  a2:	88 0f       	add	r24, r24
  a4:	99 1f       	adc	r25, r25
  a6:	90 93 63 00 	sts	0x0063, r25
  aa:	80 93 62 00 	sts	0x0062, r24
		/* Set pwm output */
		pwm_write(pwmvalue);
  ae:	80 91 62 00 	lds	r24, 0x0062
  b2:	90 91 63 00 	lds	r25, 0x0063

	// Clear OC0B output on compare match, upwards counting
	TCCR0A |= (1<<COM0A1) | (1<<COM0B1);
}
void pwm_write(uint8_t value){
	OCR0B = value;
  b6:	88 bd       	out	0x28, r24	; 40
//		if(countCopy > 50)
			pwmvalue = countCopy*2; // 50 is a testing value
		/* Set pwm output */
		pwm_write(pwmvalue);
		//reset pulses
		IRcount = 0;
  b8:	10 92 65 00 	sts	0x0065, r1
  bc:	10 92 64 00 	sts	0x0064, r1
		countCopy = 0;
  c0:	10 92 61 00 	sts	0x0061, r1
  c4:	10 92 60 00 	sts	0x0060, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c8:	2f ef       	ldi	r18, 0xFF	; 255
  ca:	89 e6       	ldi	r24, 0x69	; 105
  cc:	98 e1       	ldi	r25, 0x18	; 24
  ce:	21 50       	subi	r18, 0x01	; 1
  d0:	80 40       	sbci	r24, 0x00	; 0
  d2:	90 40       	sbci	r25, 0x00	; 0
  d4:	e1 f7       	brne	.-8      	; 0xce <main+0x64>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <main+0x6e>
  d8:	00 00       	nop
  da:	d7 cf       	rjmp	.-82     	; 0x8a <main+0x20>

000000dc <__vector_2>:
		
	}
	return 1;
}

ISR (PCINT0_vect){  
  dc:	1f 92       	push	r1
  de:	0f 92       	push	r0
  e0:	0f b6       	in	r0, 0x3f	; 63
  e2:	0f 92       	push	r0
  e4:	11 24       	eor	r1, r1
  e6:	2f 93       	push	r18
  e8:	3f 93       	push	r19
  ea:	8f 93       	push	r24
  ec:	9f 93       	push	r25
	inputStateA = PINB & 0b00000001; 
  ee:	26 b3       	in	r18, 0x16	; 22
  f0:	82 2f       	mov	r24, r18
  f2:	81 70       	andi	r24, 0x01	; 1
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	90 93 6f 00 	sts	0x006F, r25
  fa:	80 93 6e 00 	sts	0x006E, r24
//	pwm_write(50);
	// << PB0 is the one we use for IRfly_R
	
	/* LOW */	
	if (inputStateA == 0b00000000){
  fe:	89 2b       	or	r24, r25
 100:	29 f5       	brne	.+74     	; 0x14c <__vector_2+0x70>
		//check if we are already timing a pulse
		if ( (timingA_in_prog == 0) )
 102:	80 91 6c 00 	lds	r24, 0x006C
 106:	90 91 6d 00 	lds	r25, 0x006D
 10a:	89 2b       	or	r24, r25
 10c:	09 f0       	breq	.+2      	; 0x110 <__vector_2+0x34>
 10e:	4b c0       	rjmp	.+150    	; 0x1a6 <__vector_2+0xca>
			TCNT1=0; //not timing anything, reset counter 
 110:	1f bc       	out	0x2f, r1	; 47
		if ( (timingA_in_prog == 0) ){ //not already timing a pulse on A,this is a new falling edge. 
 112:	80 91 6c 00 	lds	r24, 0x006C
 116:	90 91 6d 00 	lds	r25, 0x006D
 11a:	89 2b       	or	r24, r25
 11c:	b9 f4       	brne	.+46     	; 0x14c <__vector_2+0x70>
			//set current tcnt0 as pulseA_start
			pulseA_start=TCNT1;
 11e:	8f b5       	in	r24, 0x2f	; 47
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	90 93 6b 00 	sts	0x006B, r25
 126:	80 93 6a 00 	sts	0x006A, r24
			pulseA_length=0;
 12a:	10 92 69 00 	sts	0x0069, r1
 12e:	10 92 68 00 	sts	0x0068, r1
			timingA_in_prog = 1; //set flag for A
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	90 93 6d 00 	sts	0x006D, r25
 13a:	80 93 6c 00 	sts	0x006C, r24
		}
	}
	
	/* HIGH */	
	if (inputStateA == 0b00000001){
 13e:	80 91 6e 00 	lds	r24, 0x006E
 142:	90 91 6f 00 	lds	r25, 0x006F
 146:	01 97       	sbiw	r24, 0x01	; 1
 148:	71 f5       	brne	.+92     	; 0x1a6 <__vector_2+0xca>
 14a:	0c c0       	rjmp	.+24     	; 0x164 <__vector_2+0x88>
 14c:	80 91 6e 00 	lds	r24, 0x006E
 150:	90 91 6f 00 	lds	r25, 0x006F
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	39 f5       	brne	.+78     	; 0x1a6 <__vector_2+0xca>
		if((timingA_in_prog == 1)){ 
 158:	80 91 6c 00 	lds	r24, 0x006C
 15c:	90 91 6d 00 	lds	r25, 0x006D
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	e9 f4       	brne	.+58     	; 0x19e <__vector_2+0xc2>
			pulseA_length= TCNT1 - pulseA_start;
 164:	8f b5       	in	r24, 0x2f	; 47
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	20 91 6a 00 	lds	r18, 0x006A
 16c:	30 91 6b 00 	lds	r19, 0x006B
 170:	82 1b       	sub	r24, r18
 172:	93 0b       	sbc	r25, r19
 174:	90 93 69 00 	sts	0x0069, r25
 178:	80 93 68 00 	sts	0x0068, r24
			timingA_in_prog = 0; //clear flag for A
 17c:	10 92 6d 00 	sts	0x006D, r1
 180:	10 92 6c 00 	sts	0x006C, r1
			
			/* 2.4ms pulse, 1024 prescalar */
			if((pulseA_length <= 40) && (pulseA_length >= 20)){
 184:	44 97       	sbiw	r24, 0x14	; 20
 186:	45 97       	sbiw	r24, 0x15	; 21
 188:	70 f4       	brcc	.+28     	; 0x1a6 <__vector_2+0xca>
				IRcount++;
 18a:	80 91 64 00 	lds	r24, 0x0064
 18e:	90 91 65 00 	lds	r25, 0x0065
 192:	01 96       	adiw	r24, 0x01	; 1
 194:	90 93 65 00 	sts	0x0065, r25
 198:	80 93 64 00 	sts	0x0064, r24
 19c:	04 c0       	rjmp	.+8      	; 0x1a6 <__vector_2+0xca>
//				pwm_write(50);
			}
		}
	else 
		detected_A=0;
 19e:	10 92 67 00 	sts	0x0067, r1
 1a2:	10 92 66 00 	sts	0x0066, r1
		
	}	
}
 1a6:	9f 91       	pop	r25
 1a8:	8f 91       	pop	r24
 1aa:	3f 91       	pop	r19
 1ac:	2f 91       	pop	r18
 1ae:	0f 90       	pop	r0
 1b0:	0f be       	out	0x3f, r0	; 63
 1b2:	0f 90       	pop	r0
 1b4:	1f 90       	pop	r1
 1b6:	18 95       	reti

000001b8 <_exit>:
 1b8:	f8 94       	cli

000001ba <__stop_program>:
 1ba:	ff cf       	rjmp	.-2      	; 0x1ba <__stop_program>
